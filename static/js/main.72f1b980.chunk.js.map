{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/CommentInfo/CommentInfo.tsx","components/CommentList/CommentList.tsx","components/PostInfo/PostInfo.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","CommentInfo","comment","body","CommentList","comments","map","id","PostInfo","post","title","length","PostList","posts","postsFromServer","userId","usersFromServer","find","postId","commentsFromServer","filter","App","ReactDOM","render","document","getElementById"],"mappings":"m18IAQaA,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClCC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KAEf,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGC,KCNMG,G,MAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAC1C,sBAAKH,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCG,EAAQJ,OAE9C,OAED,mBACEC,UAAU,qBACVC,KAAI,iBAAYE,EAAQL,OAF1B,SAIGK,EAAQL,WAIb,qBAAKE,UAAU,oBAAf,SACGG,EAAQC,YCdFC,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC1C,8BACGA,EAASC,KAAI,SAAAJ,GAAO,OACnB,qBAAKH,UAAU,cAAf,SACE,cAAC,EAAD,CAAaG,QAASA,GAAcA,EAAQK,YCHvCC,G,MAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,EAIED,EAJFC,MACAd,EAGEa,EAHFb,KACAO,EAEEM,EAFFN,KACAE,EACEI,EADFJ,SAGF,OACE,sBAAKN,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCW,IAChCd,GAEG,8BACG,eACAA,GAAQ,cAAC,EAAD,CAAUA,KAAMA,UAKjC,mBAAGG,UAAU,iBAAb,SACGI,IAGH,uBAECE,EAASM,OAAS,EACd,cAAC,EAAD,CAAaN,SAAUA,IACvB,mBAAG,UAAQ,oBAAX,kCC/BEO,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,qBAAKd,UAAU,WAAf,SACGc,EAAMP,KAAI,SAAAG,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKF,UCKtC,IAMaM,EAAiBC,EAAgBR,KAAI,SAAAG,GAAI,kCACjDA,GADiD,IAEpDb,MAdemB,EAcDN,EAAKM,OAbDC,EAAgBC,MAAK,SAAArB,GAAI,OAAIA,EAAKW,KAAOQ,MAEvC,MAYpBV,UATkBa,EASGT,EAAKF,GAR1BY,EAAmBC,QAAO,SAAAlB,GAAO,OAC/BA,EAAQgB,SAAWA,QAFJ,IAACA,EANHH,KAkBJM,EAAgB,kBAC3B,0BAAStB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCACA,cAAC,EAAD,CAAUc,MAAOA,QC3BrBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.72f1b980.chunk.js","sourcesContent":["import React from 'react';\nimport './UserInfo.scss';\nimport { Users } from '../../types/Users';\n\ntype Props = {\n  user: Users;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { Comments } from '../../types/Comments';\n\ntype Props = {\n  comment: Comments;\n};\n\nexport const CommentInfo: React.FC<Props> = ({ comment }) => (\n  <div className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">{comment.name}</strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${comment.email}`}\n      >\n        {comment.email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {comment.body}\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './CommentList.scss';\nimport { Comments } from '../../types/Comments';\nimport { CommentInfo } from '../CommentInfo';\n\ntype Props = {\n  comments: Comments[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <div>\n    {comments.map(comment => (\n      <div className=\"CommentList\">\n        <CommentInfo comment={comment} key={comment.id} />\n      </div>\n    ))}\n  </div>\n);\n","import React from 'react';\nimport { Posts } from '../../types/Posts';\nimport { UserInfo } from '../UserInfo';\nimport { CommentList } from '../CommentList';\nimport './PostInfo.scss';\n\ntype Props = {\n  post: Posts,\n};\n\nexport const PostInfo: React.FC<Props> = ({ post }) => {\n  const {\n    title,\n    user,\n    body,\n    comments,\n  } = post;\n\n  return (\n    <div className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n        {user\n          && (\n            <p>\n              {' Posted by  '}\n              {user && <UserInfo user={user} />}\n            </p>\n          )}\n      </div>\n\n      <p className=\"PostInfo__body\">\n        {body}\n      </p>\n\n      <hr />\n\n      {comments.length > 0\n        ? (<CommentList comments={comments} />)\n        : (<b data-cy=\"NoCommentsMessage\">No comments yet</b>)}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Posts } from '../../types/Posts';\nimport { PostInfo } from '../PostInfo';\n\ntype Props = {\n  posts: Posts[],\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './App.scss';\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\nimport { Users } from './types/Users';\nimport { Comments } from './types/Comments';\nimport { Posts } from './types/Posts';\n\nfunction getUser(userId: number): Users | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst getComment = (postId: number): Comments[] => (\n  commentsFromServer.filter(comment => (\n    comment.postId === postId\n  ))\n);\n\nexport const posts: Posts[] = postsFromServer.map(post => ({\n  ...post,\n  user: getUser(post.userId),\n  comments: getComment(post.id),\n}));\n\nexport const App: React.FC = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}